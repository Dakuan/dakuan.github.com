c({"name": "steal.static.rootUrl", "params": {"src": {"description": "<p>a relative path from the current page to the root directory of JMVC, like ../../</p>", "type": "String", "optional": true, "order": 0, "name": "src"}}, "ret": {"description": "<p>returns the last path passed to rootUrl</p>", "type": "String"}, "type": "function", "parents": ["steal.static"], "comment": "<p>Gets or sets the path from the current page to \nsteal's (or JavaScriptMVC's) root folder.  When passed a src, it sets the root folder. \nOtherwise, it returns the path to the root folder.</p>\n\n<p>This is the path from which \nall plugins are stolen.  When you steal a plugin like steal(\"jquery/controller\"), \nthe plugin path is joined with this rootUrl to create a full path \nto the controller.js file.</p>\n\n<p>By default, the rootUrl is calculated from the\nsteal script and the window location.  For example, if the \nscript tag looks like this:</p>\n\n<pre><code>&lt;script type='text/javascript' src='../../steal/steal.js?ui/app'&gt;&lt;/script&gt;\n</code></pre>\n\n<p>rootUrl will be set to \"../../\".\nSetting the rootUrl can be useful if you want to have\nsteal.js in a different location.</p>\n\n<h2>Example</h2>\n\n<p>The following sets steal root to a different folder.</p>\n\n<pre><code>steal.rootUrl(\"../../jmvc/\")\n</code></pre>\n\n<p>This appends  <code>\"../../jmvc\"</code> to paths\nloaded from [steal.static.root].  In some strange cases this might be desirable if \nplugin folders are in a different location from the steal directory. </p>\n\n<p>It also sets the current url to this directory so the first calls to steal work relative to the root JMVC directory.</p>", "src": "steal/steal.js", "line": 896, "children": []})