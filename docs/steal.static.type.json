c({"name": "steal.static.type", "params": {"type": {"description": "<p>A string that defines the new type being defined and the type being converted to, \nseparated by a space, like \"coffee js\".  </p>\n\n<p>There can be more than two steps used in conversion, such as \"ejs view \njs\".  This will define a method that converts .ejs files to .view files.  There should be another converter for \"view js\" \nthat makes this final conversion to JS.</p>", "type": "String", "optional": false, "order": 0, "name": "type"}, "cb( options, original, success, error )": {"order": 1, "description": "<p>a callback function that converts the new file type \nto a basic type.  This method needs to do two things: 1) save the text of the converted file in options.text \nand 2) call success() when the conversion is done (it can work asynchronously).</p>\n\n<ul>\n<li><strong>options</strong> - the steal options for this file, including path information</li>\n<li><strong>original</strong> - the original argument passed to steal, which might be a path or a function</li>\n<li><strong>success</strong> - a method to call when the file is converted and processed successfully</li>\n<li><strong>error</strong> - a method called if the conversion fails or the file doesn't exist</li>\n</ul>", "name": "cb( options, original, success, error )", "type": "Function", "optional": false}}, "ret": {"type": "undefined", "description": ""}, "type": "function", "parents": ["steal.static"], "comment": "<p>Registers a type.  You define the type of the file, the basic type it converts to, and a \nconversion function where you convert the original file to JS or CSS.  This is modeled after the \n[http://api.jquery.com/extending-ajax/#Converters AJAX converters] in jQuery.</p>\n\n<p>Types are designed to make it simple to switch between steal's development and production modes.  In development mode, the types are converted \nin the browser to allow devs to see changes as they work.  When the app is built, these converter functions are run by the build process, \nand the processed text is inserted into the production script, optimized for performance.</p>\n\n<p>Here's an example converting files of type .foo to JavaScript.  Foo is a fake language that saves global variables defined like.  A .foo file might \nlook like this:</p>\n\n<pre><code>REQUIRED FOO\n</code></pre>\n\n<p>To define this type, you'd call steal.type like this:</p>\n\n<pre><code>steal.type(\"foo js\", function(options, original, success, error){\n  var parts = options.text.split(\" \")\n  options.text = parts[0]+\"='\"+parts[1]+\"'\";\n  success();\n});\n</code></pre>\n\n<p>The method we provide is called with the text of .foo files in options.text. We parse the file, create \nJavaScript and put it in options.text.  Couldn't be simpler.</p>\n\n<p>Here's an example, converting [http://jashkenas.github.com/coffee-script/ coffeescript] to JavaScript:</p>\n\n<pre><code>steal.type(\"coffee js\", function(options, original, success, error){\n  options.text = CoffeeScript.compile(options.text);\n  success();\n});\n</code></pre>\n\n<p>In this example, any time steal encounters a file with\nextension .coffee, it will call the given \nconverter method.  CoffeeScript.compile takes the text of the file, converts it from coffeescript to javascript, \nand saves the JavaScript text in options.text.</p>\n\n<p>Similarly, languages on top of CSS, like [http://lesscss.org/ LESS], can be converted to CSS:</p>\n\n<pre><code>steal.type(\"less css\", function(options, original, success, error){\n  new (less.Parser)({\n    optimization: less.optimization,\n    paths: []\n  }).parse(options.text, function (e, root) {\n    options.text = root.toCSS();\n    success();\n  });\n});\n</code></pre>\n\n<p>This simple type system could be used to convert any file type to be used in your JavaScript app.  For example, \n[http://fdik.org/yml/ yml] could be used for configuration.  jQueryMX uses steal.type to support JS templates, such as EJS, TMPL, and others.</p>", "src": "steal/steal.js", "line": 1139, "children": []})