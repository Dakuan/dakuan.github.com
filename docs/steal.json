c({"name": "steal", "type": "class", "comment": "<p><strong>steal</strong> is a function that loads scripts, css, and \nother resources into your application.</p>\n\n<pre><code>steal(FILE_or_FUNCTION, ...)\n</code></pre>\n\n<h2>Quick Walkthrough</h2>\n\n<p>Add a script tag that loads <code>steal/steal.js</code> and add\nthe path to the first file to load in the query string like:</p>\n\n<p>&lt;script type='text/javascript'\n    src='../steal/steal.js?myapp/myapp.js'>\n&lt;/script></p>\n\n<p>Then, start loading things and using them like:</p>\n\n<pre><code>steal('myapp/tabs.js',\n      'myapp/slider.js', \n      'myapp/style.css',function(){\n\n   // tabs and slider have loaded \n   $('#tabs').tabs();\n   $('#slider').slider()\n})\n</code></pre>\n\n<p>Make sure your widgets load their dependencies too:</p>\n\n<pre><code>// myapp/tabs.js\nsteal('jquery', function(){\n  $.fn.tabs = function(){\n   ...\n  }\n})\n</code></pre>\n\n<h2>Examples:</h2>\n\n<pre><code>// Loads ROOT/jquery/controller/controller.js\nsteal('jquery/controller')\nsteal('jquery/controller/controller.js')\n\n// Loads coffee script type and a coffee file relative to\n// the current file\nsteal('steal/coffee').then('./mycoffee.coffee')\n\n// Load 2 files and dependencies in parallel and\n// callback when both have completed\nsteal('jquery/controller','jquery/model', function(){\n  // $.Controller and $.Model are available\n})\n\n// Loads a coffee script with a non-standard extension (cf)\n// relative to the current page and instructs the build\n// system to not package it (but it will still be loaded).\nsteal({\n   src: \"./foo.cf\",\n   packaged: false,\n   type: \"coffee\"\n })\n</code></pre>\n\n<p>The following is a longer walkthrough of how to install\nand use steal:</p>\n\n<h2>Adding steal to a page</h2>\n\n<p>After installing StealJS (or JavaScriptMVC), \nfind the <code>steal</code> folder with\n<code>steal/steal.js</code>. </p>\n\n<p>To use steal, add a script tag\nto <code>steal/steal.js</code> to your\nhtml pages.  </p>\n\n<p>This walkthrough assumes you have the steal script \nin <code>public/steal/steal.js</code> and a directory \nstructure like:</p>\n\n<pre><code class='text'>/public\n    /steal\n    /pages\n        myapp.html\n    /myapp\n        myapp.js\n        jquery.js\n        jquery.ui.tabs.js</code></pre>\n\n<p>To use steal in <code>public/pages/myapp.html</code>,\nadd a script tag in <code>myapp.html</code>:</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n    src='../steal/steal.js'>\n&lt;/script></code></pre>\n\n<div class='whisper'>PRO TIP: Bottom load your scripts. It\nwill increase your application's percieved response time.</div>\n\n<h2>Loading the First Script</h2>\n\n<p>Once steal has been added to your page, it's time\nto load scripts. We want to load <code>myapp.js</code>\nand have it load <code>jquery.js</code> and \n<code>jquery.ui.tabs.js</code>.</p>\n\n<p>By default, steal likes your scripts\nto be within in the [steal.static.root steal.root] folder.  The [steal.root] the \nfolder contains the <code>steal</code> folder.  In this example,\nit is the <code>public</code> folder.</p>\n\n<p>To load <code>myapp/myapp.js</code>, we have two options:</p>\n\n<h4>Add a script tag</h4>\n\n<p>Add a script tag after the steal \nscript that 'steals' <code>myapp.js</code> like:</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'>\n  steal('myapp/myapp.js')\n&lt;/script></code></pre>\n\n<h4>Add the script parameter</h4>\n\n<p>The most common (and shortest) way to load <code>myapp.js</code>\nis to add the script path to the steal script's src after in the\nquery params.  So, instead of adding a script, we change \nthe steal script from:</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n    src='../steal/steal.js'>\n&lt;/script></code></pre>\n\n<p>To</p>\n\n<pre><code class='html'>&lt;script type='text/javascript'\n    src='../steal/steal.js?<b>myapp/myapp.js</b>'>\n&lt;/script></code></pre>\n\n<div class='whisper'>PRO TIP: You can also just add\n<code>?myapp</code> to the query string.</div>\n\n<h2>Loading Scripts</h2>\n\n<p>We want to load <code>jquery.js</code> and\n<code>jquery.ui.tabs.js</code> into the page and then\nadd then create a tabs widget.  First we need to load \n<code>jquery.js</code>.</p>\n\n<p>By default, steal loads script relative to [steal.root]. To\nload <code>myapp/jquery.js</code> we can the following to\n<code>myapp.js</code>:</p>\n\n<pre><code>steal('myapp/jquery.js');\n</code></pre>\n\n<p>But, we can also load relative to <code>myapp.js</code> like:</p>\n\n<pre><code>steal('./jquery.js');\n</code></pre>\n\n<p>Next, we need to load <code>jquery.ui.tabs.js</code>.  You\nmight expect something like:</p>\n\n<pre><code>steal('./jquery.js','./jquery.ui.tabs.js')\n</code></pre>\n\n<p>to work.  But there are two problems / complications:</p>\n\n<ul>\n<li>steal loads scripts in parallel and runs out of order</li>\n<li><code>jquery.ui.tabs.js</code> depends on jQuery being loaded</li>\n</ul>\n\n<p>This means that steal might load <code>jquery.ui.tabs.js</code>\nbefore <code>jquery.js</code>.  But this is easily fixed.</p>\n\n<p>[steal.static.then] waits until all previous scripts have loaded and\nrun before loading scripts after it.  We can load <code>jquery.ui.tabs.js</code>\nafter <code>jquery.js</code> like:</p>\n\n<pre><code>steal('./jquery.js').then('./jquery.ui.tabs.js')\n</code></pre>\n\n<p>Finally, we need to add tabs to the page after \nthe tabs's widget has loaded.  We can add a callback function to\nsteal that will get called when all previous scripts have finished\nloading:</p>\n\n<pre><code>steal('./jquery.js').then('./jquery.ui.tabs.js', function($){\n  $('#tabs').tabs();\n})\n</code></pre>\n\n<h2>Other Info</h2>\n\n<h3>Exclude Code Blocks From Production</h3>\n\n<p>To exclude code blocks from being included in \nproduction builds, add the following around\nthe code blocks.</p>\n\n<pre><code>//!steal-remove-start\n    code to be removed at build\n//!steal-remove-end\n</code></pre>\n\n<h3>Lookup Paths</h3>\n\n<p>By default steal loads resources relative \nto [steal.static.root steal.root].  For example, the following\nloads foo.js in <code>steal.root</code>:</p>\n\n<pre><code>steal('foo.js'); // loads //foo.js\n</code></pre>\n\n<p>This is the same as writing:</p>\n\n<pre><code>steal('//foo.js');\n</code></pre>\n\n<p>Steal uses <code>'//'</code> to designate the [steal.static.root steal.root]\nfolder.</p>\n\n<p>To load relative to the current file, add <code>\"./\"</code> or\n <code>\"../\"</code>:</p>\n\n<pre><code>steal(\"./bar.js\",\"../folder/zed.js\");\n</code></pre>\n\n<p>Often, scripts can be found in a folder within the same \nname. For example, [jQuery.Controller $.Controller] is \nin <code>//jquery/controller/controller.js</code>. For convience,\nif steal is provided a path without an extension like:</p>\n\n<pre><code>steal('FOLDER/PLUGIN');\n</code></pre>\n\n<p>It is the same as writing:</p>\n\n<pre><code>steal('FOLDER/PLUGIN/PLUGIN.js')\n</code></pre>\n\n<p>This means that <code>//jquery/controller/controller.js</code>\ncan be loaded like:</p>\n\n<pre><code> steal('jquery/controller')\n</code></pre>\n\n<h3>Types</h3>\n\n<p>steal can load resources other than JavaScript.</p>", "parents": ["stealjs"], "construct": "<p>Loads resources specified by each argument.  By default, resources\nare loaded in parallel and run in any order.</p>", "ret": {"description": "<p>the steal object for chaining</p>", "type": "steal"}, "params": {"resource...": {"order": 0, "description": "<p>Each argument specifies a resource.  Resources can \nbe given as a:</p>\n\n<h3>Object</h3>\n\n<p>An object that specifies the loading and build \nbehavior of a resource.  </p>\n\n<pre><code> steal({\n   src: \"myfile.cf\",\n   type: \"coffee\",\n   packaged: true,\n   unique: true,\n   ignore: false,\n   waits: false\n })\n</code></pre>\n\n<p>The available options are:</p>\n\n<ul>\n<li><p><strong>src</strong> {<em>String</em>} - the path to the resource.  </p></li>\n<li><p><strong>waits</strong> {<em>Boolean default=false</em>} - true the resource should wait \nfor prior steals to load and run. False if the resource should load and run in\nparallel.  This defaults to true for functions.</p></li>\n<li><p><strong>unique</strong> {<em>Boolean default=true</em>} - true if this is a unique resource \nthat 'owns' this url.  This is true for files, false for functions.</p></li>\n<li><p><strong>ignore</strong> {<em>Boolean default=false</em>} - true if this resource should\nnot be built into a production file and not loaded in\nproduction.  This is great for script that should only be available\nin development mode.</p></li>\n<li><p><strong>packaged</strong> {<em>Boolean default=true</em>} - true if the script should be built\ninto the production file. false if the script should not be built\ninto the production file, but still loaded.  This is useful for \nloading 'packages'.</p></li>\n<li><p><strong>type</strong> {<em>String default=\"js\"</em>} - the type of the resource.  This \nis typically inferred from the src.</p></li>\n</ul>\n\n<h3><strong>String</strong></h3>\n\n<p>Specifies src of the resource.  For example:</p>\n\n<pre><code>  steal('./file.js')\n</code></pre>\n\n<p>Is the same as calling:</p>\n\n<pre><code>  steal({src: './file.js'})\n</code></pre>\n\n<h3><strong>Function</strong></h3>\n\n<p>A callback function that runs when all previous steals\nhave completed.</p>\n\n<pre><code>steal('jquery', 'foo',function(){\n  // jquery and foo have finished loading\n  // and runing\n})\n</code></pre>", "name": "resource...", "type": "String|Function|Object", "optional": false}}, "src": "steal/steal.js", "line": 882, "children": ["steal.static"]})